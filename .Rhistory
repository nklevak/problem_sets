library(foreign) # for reading spss formatted data
library(tidyr)
library(dplyr)
library(stringr) # useful for some string manipulation
library(ggplot2)
d = read.spss("data/Tamiretal2008ReplicationData.sav", to.data.frame=T)
head(d)
colnames(d)
## your code here
d$Game1Angry1.range()
## your code here
d$Game1Angry1.range()
## your code here
d[7].range()
## your code here
range(d[7])
## your code here
range(d[7])
## your code here
range(d[7],na.rm=TRUE)
## your code here
print("the lowest and highest, respectively are: ")
range(d[7],na.rm=TRUE)
print("the highest number is: ")
max(d[7],na.rm=TRUE)
print("the lowest number is: ")
min(d[7],na.rm=TRUE)
tail(d)
show(d["DoNotUse"])
filtered_d = d %>%
filter(.d,.by=d["DoNotUse"]) # your code here: exclude subjects that are marked as "DoNotUse"
filtered_d = d %>%
filter(DoNotUse==1) # your code here: exclude subjects that are marked as "DoNotUse"
filtered_d = d %>%
filter(DoNotUse==1) # your code here: exclude subjects that are marked as "DoNotUse"
filtered_d = d %>%
filter(DoNotUse?is.na()) # your code here: exclude subjects that are marked as "DoNotUse"
filtered_d = d %>%
filter(?is.na(DoNotUse)) # your code here: exclude subjects that are marked as "DoNotUse"
filtered_d = d %>%
filter(is.na(DoNotUse)) # your code here: exclude subjects that are marked as "DoNotUse"
library(foreign) # for reading spss formatted data
library(tidyr)
library(dplyr)
library(stringr) # useful for some string manipulation
library(ggplot2)
library(foreign) # for reading spss formatted data
library(tidyr)
library(dplyr)
library(stringr) # useful for some string manipulation
library(ggplot2)
d = read.spss("data/Tamiretal2008ReplicationData.sav", to.data.frame=T)
head(d)
colnames(d)
## your code here
print("the lowest and highest, respectively are: ")
range(d[7],na.rm=TRUE)
print("the highest number is: ")
max(d[7],na.rm=TRUE)
print("the lowest number is: ")
min(d[7],na.rm=TRUE)
tail(d)
show(d["DoNotUse"])
filtered_d = d %>%
filter(is.na(DoNotUse)) # your code here: exclude subjects that are marked as "DoNotUse"
filtered_d = filtered_d %>%
select(c("Subject", "Cond"), # Generally important columns for both hypotheses
contains("Game"), # we want all the game columns for hypothesis 1
-contains("Intro"), -c("WhichGames", "GameComments"), # except these
starts_with("DinerDashWith"), c("SOFMusicEnemies", "SOFNoMusicEnemies")) # These columns are for hypothesis 2
rating_hyp_d = filtered_d %>%
filter(is.na(DoNotUseVideoGamePerformanceData)) %>% # first, let's get rid of the subjects who did so poorly on one game that their data is unusable
select(-DoNotUseVideoGamePerformanceData, # now get rid of that column
-starts_with("DinerDash"), # and the other columns we don't need
-starts_with("SOF"))
performance_hyp_d = filtered_d %>%
select(-contains("Game")) # your code here: remove the columns containing "Game" in the name
tiny_demo_d = head(performance_hyp_d, 2) # get just the first two subjects performance data, for a demo
tiny_demo_d
tiny_demo_d %>% pivot_longer(cols=-c("Subject", "Cond"), # this tells it to transform all columns *except* these ones
names_to='Measurement',
values_to='Value')
performance_hyp_long_d = performance_hyp_d %>%
pivot_longer(cols=-c("Subject", "Cond"),
names_to='Measurement',
values_to='Score')
head(performance_hyp_long_d)
rating_hyp_long_d = rating_hyp_d %>%
## your code here
pivot_longer(cols=-c("Subject","Cond"),
names_to="Measurement",
values_to="Rating")
head(rating_hyp_long_d)
performance_hyp_long_d = performance_hyp_long_d %>%
mutate(ConfrontationalGame = grepl("SOF", Measurement), # create a new variable that will say whether the measurement was of the game soldier of fortune (SOF).
WithMusic = !grepl("NoMusic|WithoutMusic", Measurement), # creates a new column named WithMusic, which is False if the measurement contains *either* "NoMusic" or "WithoutMusic"
MusicCondition = factor(ifelse(Cond > 3, Cond-3, Cond), levels = 1:3, labels = c("Anger", "Exciting", "Neutral"))) # Get rid of uninterpretable condition labels
performance_hyp_long_d = performance_hyp_long_d %>%
mutate(ConfrontationalGame = grepl("SOF", Measurement), # create a new variable that will say whether the measurement was of the game soldier of fortune (SOF).
WithMusic = !grepl("NoMusic|WithoutMusic", Measurement), # creates a new column named WithMusic, which is False if the measurement contains *either* "NoMusic" or "WithoutMusic"
MusicCondition = factor(ifelse(Cond > 3, Cond-3, Cond), levels = 1:3, labels = c("Anger", "Exciting", "Neutral"))) # Get rid of uninterpretable condition labels
rating_hyp_long_d = rating_hyp_long_d %>%
mutate(
IsRecall = grepl("Friends|Strangers",Measurement),## Your code here
)
rating_hyp_long_d = rating_hyp_long_d %>%
mutate(
GameNumber = as.numeric(substr(rating_hyp_long_d$Measurement, 5, 5)),
ConfrontationalGame = GameNumber <= 2, # in a mutate, we can use a column we created (or changed) right away. Games 1 and 2 are confrontational, games 3 and 4 are not.
Emotion = str_extract(Measurement, "Angry|Neutral|Excited|Exciting|Calm"),
Emotion = ifelse(Emotion == "Excited", "Exciting", # this just gets rid of some annoying labeling choices
ifelse(Emotion == "Calm", "Neutral", Emotion))
)
performance_hyp_long_d %>%
group_by(ConfrontationalGame) %>%
summarize(AvgScore = mean(Score, na.rm=T)) # the na.rm tells R to ignore NA values
performance_hyp_long_d = performance_hyp_long_d %>%
group_by(ConfrontationalGame, WithMusic) %>% # we're going to compute four sets of z-scores, one for the confrontational game without music, one for the confrontational game with, one for the nonconfrontational game without music, and one for the nonconfrontational game with
mutate(z_scored_performance = scale(Score)) %>%
ungroup()
performance_hyp_long_d = performance_hyp_long_d %>%
group_by(ConfrontationalGame, WithMusic) %>% # we're going to compute four sets of z-scores, one for the confrontational game without music, one for the confrontational game with, one for the nonconfrontational game without music, and one for the nonconfrontational game with
mutate(z_scored_performance = scale(Score)) %>%
ungroup()
performance_hyp_long_d = performance_hyp_long_d %>%
group_by(ConfrontationalGame, WithMusic) %>% # we're going to compute four sets of z-scores, one for the confrontational game without music, one for the confrontational game with, one for the nonconfrontational game without music, and one for the nonconfrontational game with
mutate(z_scored_performance = scale(Score)) %>%
ungroup()
performance_hyp_long_d = performance_hyp_long_d %>%
group_by(ConfrontationalGame, WithMusic) %>% # we're going to compute four sets of z-scores, one for the confrontational game without music, one for the confrontational game with, one for the nonconfrontational game without music, and one for the nonconfrontational game with
mutate(z_scored_performance = scale(Score)) %>%
ungroup()
rating_summary_d = rating_hyp_long_d %>%
## your code here
group_by(ConfrontationalGame,Emotion) %>%
summarize(MeanRating = mean(Rating))
rating_summary_d
ggplot(rating_summary_d, aes(x=ConfrontationalGame, y=MeanRating, fill=Emotion)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1")
model = lm(Rating ~ ConfrontationalGame * Emotion, rating_hyp_long_d)
summary(model)
performance_diff_d = performance_hyp_long_d %>%
mutate(WithMusic = factor(WithMusic, levels=c(F, T), labels=c("PreMusic", "PostMusic"))) %>% # first, tweak the variable so our code is easier to read.
select(-c("Score", "Measurement")) %>% # now we remove columns we don't need (bonus: leave them in and see if you can understand what goes wrong!)
pivot_wider(names_from=WithMusic,
values_from=z_scored_performance) %>%
mutate(ImprovementScore=PostMusic-PreMusic)
performance_diff_d
performance_diff_summary_d = performance_diff_d %>%
## Your code here
group_by(ConfrontationalGame, MusicCondition) %>%
mutate(MeanImprovementScore = mean(ImprovementScore))
performance_diff_summary_d
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1")
performance_diff_summary_d = performance_diff_d %>%
## Your code here
group_by(ConfrontationalGame, MusicCondition) %>%
mutate(MeanImprovementScore = mean(ImprovementScore,na.rm=T))
performance_diff_summary_d = performance_diff_d %>%
## Your code here
group_by(ConfrontationalGame, MusicCondition) %>%
mutate(MeanImprovementScore = mean(ImprovementScore,na.rm=T))
performance_diff_summary_d
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1")
performance_model = lm(ImprovementScore ~ ConfrontationalGame * MusicCondition, performance_diff_d)
summary(performance_model)
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1")
performance_diff_summary_d_err = performance_diff_d %>%
## Your code here
group_by(ConfrontationalGame, MusicCondition) %>%
mutate(MeanImprovementScore = mean(ImprovementScore,na.rm=T)) %>%
mutate(SEM=sem(ImprovementScore,na.rm=T))
performance_diff_summary_d_err = performance_diff_d %>%
## Your code here
group_by(ConfrontationalGame, MusicCondition) %>%
mutate(MeanImprovementScore = mean(ImprovementScore,na.rm=T)) %>%
mutate(SEM=mean_se(ImprovementScore,na.rm=T, mult = 1)
)
SEM = mean_se(performance_diff_summary_d[MeanImprovementScore])
SEM = mean_se(performance_diff_summary_d["MeanImprovementScore"])
SEM = mean_se(performance_diff_summary_d["MeanImprovementScore",na.rm=T])
SEM = mean_se(performance_diff_summary_d["MeanImprovementScore",na.rm=T])
SEM = mean_se(performance_diff_summary_d["MeanImprovementScore",na.rm=T])
performance_diff_summary_d = performance_diff_d %>%
## Your code here
group_by(ConfrontationalGame, MusicCondition) %>%
mutate(MeanImprovementScore = mean(ImprovementScore,na.rm=T)) %>%
mutate(SEM=mean_se(ImprovementScore,na.rm=T))
performance_diff_summary_d = performance_diff_d %>%
## Your code here
group_by(ConfrontationalGame, MusicCondition) %>%
mutate(MeanImprovementScore = mean(ImprovementScore,na.rm=T)) %>%
mutate(SEM=mean_se(ImprovementScore))
performance_diff_summary_d
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar(data=SEM) +
scale_fill_brewer(palette="Set1")
performance_diff_summary_d = performance_diff_d %>%
## Your code here
group_by(ConfrontationalGame, MusicCondition) %>%
mutate(MeanImprovementScore = mean(ImprovementScore,na.rm=T)) %>%
performance_diff_summary_d = performance_diff_d %>%
## Your code here
group_by(ConfrontationalGame, MusicCondition) %>%
mutate(MeanImprovementScore = mean(ImprovementScore,na.rm=T))
performance_diff_summary_d
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1")
performance_diff_summary_d = performance_diff_d %>%
## Your code here
group_by(ConfrontationalGame, MusicCondition) %>%
mutate(MeanImprovementScore = mean(ImprovementScore,na.rm=T)) %>%
mutate(n=n())%>%
mutate(sd = sd(MeanImprovementScore)) %>%
mutate(sem = sd / sqrt(n))
performance_diff_summary_d
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1")
performance_diff_summary_d = performance_diff_d %>%
## Your code here
group_by(ConfrontationalGame, MusicCondition) %>%
summarize(
MeanImprovementScore = mean(ImprovementScore,na.rm=T),
nsub=n(),
sdsub = sd(MeanImprovementScore),
sem = sdsub / sqrt(nsub)
)
performance_diff_summary_d
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1")
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar(sem)
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar(sem) +
scale_fill_brewer(palette="Set1")
performance_diff_summary_d = performance_diff_d %>%
## Your code here
group_by(ConfrontationalGame, MusicCondition) %>%
summarize(
MeanImprovementScore = mean(ImprovementScore,na.rm=T),
nsub=n(),
sdsub = sd(MeanImprovementScore,na.rm=T),
sem = sdsub / sqrt(nsub)
)
performance_diff_summary_d
performance_diff_summary_d = performance_diff_d %>%
## Your code here
group_by(ConfrontationalGame, MusicCondition) %>%
summarize(
MeanImprovementScore = mean(ImprovementScore,na.rm=T),
nsub=n(),
sdsub = sd(ImprovementScore,na.rm=T),
sem = sdsub / sqrt(nsub)
)
performance_diff_summary_d
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar(sem) +
scale_fill_brewer(palette="Set1")
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar(sem) +
scale_fill_brewer(palette="Set1")
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar(sem) +
scale_fill_brewer(palette="Set1")
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar(sem) +
scale_fill_brewer(palette="Set1")
library(foreign) # for reading spss formatted data
library(tidyr)
library(dplyr)
library(stringr) # useful for some string manipulation
library(ggplot2)
d = read.spss("data/Tamiretal2008ReplicationData.sav", to.data.frame=T)
head(d)
colnames(d)
## your code here
print("the lowest and highest, respectively are: ")
range(d[7],na.rm=TRUE)
print("the highest number is: ")
max(d[7],na.rm=TRUE)
print("the lowest number is: ")
min(d[7],na.rm=TRUE)
tail(d)
show(d["DoNotUse"])
filtered_d = d %>%
filter(is.na(DoNotUse)) # your code here: exclude subjects that are marked as "DoNotUse"
filtered_d = filtered_d %>%
select(c("Subject", "Cond"), # Generally important columns for both hypotheses
contains("Game"), # we want all the game columns for hypothesis 1
-contains("Intro"), -c("WhichGames", "GameComments"), # except these
starts_with("DinerDashWith"), c("SOFMusicEnemies", "SOFNoMusicEnemies")) # These columns are for hypothesis 2
rating_hyp_d = filtered_d %>%
filter(is.na(DoNotUseVideoGamePerformanceData)) %>% # first, let's get rid of the subjects who did so poorly on one game that their data is unusable
select(-DoNotUseVideoGamePerformanceData, # now get rid of that column
-starts_with("DinerDash"), # and the other columns we don't need
-starts_with("SOF"))
performance_hyp_d = filtered_d %>%
select(-contains("Game")) # your code here: remove the columns containing "Game" in the name
tiny_demo_d = head(performance_hyp_d, 2) # get just the first two subjects performance data, for a demo
tiny_demo_d
tiny_demo_d %>% pivot_longer(cols=-c("Subject", "Cond"), # this tells it to transform all columns *except* these ones
names_to='Measurement',
values_to='Value')
performance_hyp_long_d = performance_hyp_d %>%
pivot_longer(cols=-c("Subject", "Cond"),
names_to='Measurement',
values_to='Score')
head(performance_hyp_long_d)
rating_hyp_long_d = rating_hyp_d %>%
## your code here
pivot_longer(cols=-c("Subject","Cond"),
names_to="Measurement",
values_to="Rating")
head(rating_hyp_long_d)
performance_hyp_long_d = performance_hyp_long_d %>%
mutate(ConfrontationalGame = grepl("SOF", Measurement), # create a new variable that will say whether the measurement was of the game soldier of fortune (SOF).
WithMusic = !grepl("NoMusic|WithoutMusic", Measurement), # creates a new column named WithMusic, which is False if the measurement contains *either* "NoMusic" or "WithoutMusic"
MusicCondition = factor(ifelse(Cond > 3, Cond-3, Cond), levels = 1:3, labels = c("Anger", "Exciting", "Neutral"))) # Get rid of uninterpretable condition labels
rating_hyp_long_d = rating_hyp_long_d %>%
mutate(
IsRecall = grepl("Friends|Strangers",Measurement),## Your code here
)
rating_hyp_long_d = rating_hyp_long_d %>%
mutate(
GameNumber = as.numeric(substr(rating_hyp_long_d$Measurement, 5, 5)),
ConfrontationalGame = GameNumber <= 2, # in a mutate, we can use a column we created (or changed) right away. Games 1 and 2 are confrontational, games 3 and 4 are not.
Emotion = str_extract(Measurement, "Angry|Neutral|Excited|Exciting|Calm"),
Emotion = ifelse(Emotion == "Excited", "Exciting", # this just gets rid of some annoying labeling choices
ifelse(Emotion == "Calm", "Neutral", Emotion))
)
performance_hyp_long_d %>%
group_by(ConfrontationalGame) %>%
summarize(AvgScore = mean(Score, na.rm=T)) # the na.rm tells R to ignore NA values
performance_hyp_long_d = performance_hyp_long_d %>%
group_by(ConfrontationalGame, WithMusic) %>% # we're going to compute four sets of z-scores, one for the confrontational game without music, one for the confrontational game with, one for the nonconfrontational game without music, and one for the nonconfrontational game with
mutate(z_scored_performance = scale(Score)) %>%
ungroup()
rating_summary_d = rating_hyp_long_d %>%
## your code here
group_by(ConfrontationalGame,Emotion) %>%
summarize(MeanRating = mean(Rating))
rating_summary_d
ggplot(rating_summary_d, aes(x=ConfrontationalGame, y=MeanRating, fill=Emotion)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1")
model = lm(Rating ~ ConfrontationalGame * Emotion, rating_hyp_long_d)
summary(model)
performance_diff_d = performance_hyp_long_d %>%
mutate(WithMusic = factor(WithMusic, levels=c(F, T), labels=c("PreMusic", "PostMusic"))) %>% # first, tweak the variable so our code is easier to read.
select(-c("Score", "Measurement")) %>% # now we remove columns we don't need (bonus: leave them in and see if you can understand what goes wrong!)
pivot_wider(names_from=WithMusic,
values_from=z_scored_performance) %>%
mutate(ImprovementScore=PostMusic-PreMusic)
performance_diff_d
performance_diff_summary_d = performance_diff_d %>%
## Your code here
group_by(ConfrontationalGame, MusicCondition) %>%
summarize(
MeanImprovementScore = mean(ImprovementScore,na.rm=T),
nsub=n(),
sdsub = sd(ImprovementScore,na.rm=T),
sem = sdsub / sqrt(nsub)
)
performance_diff_summary_d
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar(mapping=aes(x=ConfrontationalGame, ymin=sem-sd/2, ymax=sem+sd/2), width=0.2, size=1, color="blue")) +
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar(mapping=aes(x=ConfrontationalGame, ymin=sem-sd/2, ymax=sem+sd/2)) +
scale_fill_brewer(palette="Set1")
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar(mapping=aes(x=ConfrontationalGame) +
scale_fill_brewer(palette="Set1")
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar(aes(ymin=MeanImprovementScore - sem, ymax=MeanImprovementScore+sem)) +
scale_fill_brewer(palette="Set1")
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar(aes(ymin=MeanImprovementScore - sem/2, ymax=MeanImprovementScore+sem/2)) +
scale_fill_brewer(palette="Set1")
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar(aes(ymin=MeanImprovementScore - sem/2, ymax=MeanImprovementScore+sem/2)) +
scale_fill_brewer(palette="Set1")
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar(aes(x = ConfrontationalGame, ymin=MeanImprovementScore - sem/2, ymax=MeanImprovementScore+sem/2)) +
scale_fill_brewer(palette="Set1")
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar(aes(x = ConfrontationalGame, ymin=MeanImprovementScore - sem/2, ymax=MeanImprovementScore+sem/2)) +
scale_fill_brewer(palette="Set1")
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1")
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar(aes(x = ConfrontationalGame, ymin=MeanImprovementScore - sem/2, ymax=MeanImprovementScore+sem/2), width=.2) +
scale_fill_brewer(palette="Set1")
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar(aes(x = ConfrontationalGame, ymin=- sem/2, ymax=sem/2), width=.2) +
scale_fill_brewer(palette="Set1")
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar(aes(ymin=MeanImprovementScore - sem/2, ymax=MeanImprovementScore+sem/2), width=.2) +
scale_fill_brewer(palette="Set1")
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar(aes(ymin=MeanImprovementScore - sdsub, ymax=MeanImprovementScore+sdsub), width=.2) +
scale_fill_brewer(palette="Set1")
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar(aes(ymin=MeanImprovementScore - sem/2, ymax=MeanImprovementScore+sem/2), width=.2) +
scale_fill_brewer(palette="Set1")
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar(aes(ymin=MeanImprovementScore - sem, ymax=MeanImprovementScore+sem), width=.2) +
scale_fill_brewer(palette="Set1")
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar(aes(ymin=MeanImprovementScore - sem, ymax=MeanImprovementScore+sem), width=.2,position=position_dodge(.9)) +
scale_fill_brewer(palette="Set1")
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar(aes(ymin=MeanImprovementScore - sem/2, ymax=MeanImprovementScore+sem/2), width=.2,position=position_dodge(.9)) +
scale_fill_brewer(palette="Set1")
performance_model = lm(ImprovementScore ~ ConfrontationalGame * MusicCondition, performance_diff_d)
summary(performance_model)
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar(aes(ymin=MeanImprovementScore - sem/2, ymax=MeanImprovementScore+sem/2), width=.2,position=position_dodge() +
scale_fill_brewer(palette="Set1")
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar(aes(ymin=MeanImprovementScore - sem/2, ymax=MeanImprovementScore+sem/2), width=.2,position=position_dodge) +
scale_fill_brewer(palette="Set1")
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar(aes(ymin=MeanImprovementScore - sem/2, ymax=MeanImprovementScore+sem/2), width=.2,position=position_dodge(.9)) +
scale_fill_brewer(palette="Set1")
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar(aes(ymin=MeanImprovementScore - sem/2, ymax=MeanImprovementScore+sem/2), width=.2,position=position_dodge(1)) +
scale_fill_brewer(palette="Set1")
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar(aes(ymin=MeanImprovementScore - sem/2, ymax=MeanImprovementScore+sem/2), width=.2,position=position_dodge(.9)) +
scale_fill_brewer(palette="Set1")
